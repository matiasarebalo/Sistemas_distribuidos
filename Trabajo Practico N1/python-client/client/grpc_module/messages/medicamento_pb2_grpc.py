# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import medicamento_pb2 as medicamento__pb2

class MedicamentoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.altaMedicamento = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/altaMedicamento',
                request_serializer=medicamento__pb2.MedicamentoAltaRequest.SerializeToString,
                response_deserializer=medicamento__pb2.MedicamentoAltaResponse.FromString,
                )
        self.listarMedicamentosAerosol = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/listarMedicamentosAerosol',
                request_serializer=medicamento__pb2.Pagination.SerializeToString,
                response_deserializer=medicamento__pb2.MedicamentoList.FromString,
                )
        self.listarMedicamentosNombreComercialA = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/listarMedicamentosNombreComercialA',
                request_serializer=medicamento__pb2.Pagination.SerializeToString,
                response_deserializer=medicamento__pb2.MedicamentoList.FromString,
                )
        self.getMedicamentoInfo = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/getMedicamentoInfo',
                request_serializer=medicamento__pb2.MedicamentoRequest.SerializeToString,
                response_deserializer=medicamento__pb2.MedicamentoResponse.FromString,
                )
        self.buscarPorPrimeraLetraDeNombreComercial = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/buscarPorPrimeraLetraDeNombreComercial',
                request_serializer=medicamento__pb2.ListaPorPrimeraLetraDeNombreComercial.SerializeToString,
                response_deserializer=medicamento__pb2.ListaPorTipos.FromString,
                )
        self.esPrioritario = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/esPrioritario',
                request_serializer=medicamento__pb2.CodigoParaVerificar.SerializeToString,
                response_deserializer=medicamento__pb2.Verificado.FromString,
                )
        self.verificarCodigo = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/verificarCodigo',
                request_serializer=medicamento__pb2.CodigoParaVerificar.SerializeToString,
                response_deserializer=medicamento__pb2.Verificado.FromString,
                )
        self.traerTodos = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/traerTodos',
                request_serializer=medicamento__pb2.TraerTodosRequest.SerializeToString,
                response_deserializer=medicamento__pb2.TraerTodosResponse.FromString,
                )
        self.buscarPorTipoDeMedicamento = channel.unary_unary(
                '/com.medicamentos_management.stubs.medicamento.MedicamentoService/buscarPorTipoDeMedicamento',
                request_serializer=medicamento__pb2.ListaPorTipoRequest.SerializeToString,
                response_deserializer=medicamento__pb2.ListaPorTipos.FromString,
                )


class MedicamentoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def altaMedicamento(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listarMedicamentosAerosol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listarMedicamentosNombreComercialA(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMedicamentoInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buscarPorPrimeraLetraDeNombreComercial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def esPrioritario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def verificarCodigo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def traerTodos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buscarPorTipoDeMedicamento(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MedicamentoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'altaMedicamento': grpc.unary_unary_rpc_method_handler(
                    servicer.altaMedicamento,
                    request_deserializer=medicamento__pb2.MedicamentoAltaRequest.FromString,
                    response_serializer=medicamento__pb2.MedicamentoAltaResponse.SerializeToString,
            ),
            'listarMedicamentosAerosol': grpc.unary_unary_rpc_method_handler(
                    servicer.listarMedicamentosAerosol,
                    request_deserializer=medicamento__pb2.Pagination.FromString,
                    response_serializer=medicamento__pb2.MedicamentoList.SerializeToString,
            ),
            'listarMedicamentosNombreComercialA': grpc.unary_unary_rpc_method_handler(
                    servicer.listarMedicamentosNombreComercialA,
                    request_deserializer=medicamento__pb2.Pagination.FromString,
                    response_serializer=medicamento__pb2.MedicamentoList.SerializeToString,
            ),
            'getMedicamentoInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getMedicamentoInfo,
                    request_deserializer=medicamento__pb2.MedicamentoRequest.FromString,
                    response_serializer=medicamento__pb2.MedicamentoResponse.SerializeToString,
            ),
            'buscarPorPrimeraLetraDeNombreComercial': grpc.unary_unary_rpc_method_handler(
                    servicer.buscarPorPrimeraLetraDeNombreComercial,
                    request_deserializer=medicamento__pb2.ListaPorPrimeraLetraDeNombreComercial.FromString,
                    response_serializer=medicamento__pb2.ListaPorTipos.SerializeToString,
            ),
            'esPrioritario': grpc.unary_unary_rpc_method_handler(
                    servicer.esPrioritario,
                    request_deserializer=medicamento__pb2.CodigoParaVerificar.FromString,
                    response_serializer=medicamento__pb2.Verificado.SerializeToString,
            ),
            'verificarCodigo': grpc.unary_unary_rpc_method_handler(
                    servicer.verificarCodigo,
                    request_deserializer=medicamento__pb2.CodigoParaVerificar.FromString,
                    response_serializer=medicamento__pb2.Verificado.SerializeToString,
            ),
            'traerTodos': grpc.unary_unary_rpc_method_handler(
                    servicer.traerTodos,
                    request_deserializer=medicamento__pb2.TraerTodosRequest.FromString,
                    response_serializer=medicamento__pb2.TraerTodosResponse.SerializeToString,
            ),
            'buscarPorTipoDeMedicamento': grpc.unary_unary_rpc_method_handler(
                    servicer.buscarPorTipoDeMedicamento,
                    request_deserializer=medicamento__pb2.ListaPorTipoRequest.FromString,
                    response_serializer=medicamento__pb2.ListaPorTipos.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.medicamentos_management.stubs.medicamento.MedicamentoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MedicamentoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def altaMedicamento(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/altaMedicamento',
            medicamento__pb2.MedicamentoAltaRequest.SerializeToString,
            medicamento__pb2.MedicamentoAltaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listarMedicamentosAerosol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/listarMedicamentosAerosol',
            medicamento__pb2.Pagination.SerializeToString,
            medicamento__pb2.MedicamentoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listarMedicamentosNombreComercialA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/listarMedicamentosNombreComercialA',
            medicamento__pb2.Pagination.SerializeToString,
            medicamento__pb2.MedicamentoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMedicamentoInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/getMedicamentoInfo',
            medicamento__pb2.MedicamentoRequest.SerializeToString,
            medicamento__pb2.MedicamentoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buscarPorPrimeraLetraDeNombreComercial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/buscarPorPrimeraLetraDeNombreComercial',
            medicamento__pb2.ListaPorPrimeraLetraDeNombreComercial.SerializeToString,
            medicamento__pb2.ListaPorTipos.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def esPrioritario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/esPrioritario',
            medicamento__pb2.CodigoParaVerificar.SerializeToString,
            medicamento__pb2.Verificado.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def verificarCodigo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/verificarCodigo',
            medicamento__pb2.CodigoParaVerificar.SerializeToString,
            medicamento__pb2.Verificado.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def traerTodos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/traerTodos',
            medicamento__pb2.TraerTodosRequest.SerializeToString,
            medicamento__pb2.TraerTodosResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buscarPorTipoDeMedicamento(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.medicamentos_management.stubs.medicamento.MedicamentoService/buscarPorTipoDeMedicamento',
            medicamento__pb2.ListaPorTipoRequest.SerializeToString,
            medicamento__pb2.ListaPorTipos.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
