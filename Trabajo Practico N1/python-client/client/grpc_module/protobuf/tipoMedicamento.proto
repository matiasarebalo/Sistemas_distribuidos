syntax = "proto3";

// CUANDO SE HAGA EL MVN CLEAN INSTALL, SE CREARAN TODOS LOS ARCHIVOS EN LA SIGUIENTE RUTA.
package com.medicamentos_management.stubs.tipoMedicamento;

option java_multiple_files = true;

// option java_outer_classname = "MedicamentoProto";
// option java_package = "com.example.tutorial.protos";

// Para poder devolver una respuesta vacia.
import "google/protobuf/empty.proto";
// Para poder usar la version/representacion JSON de cualquier data type.
import "google/protobuf/wrappers.proto";
//Para poder usar valores sin definir un data type. En este caso, viene bien para las dos funciones listar que tenemos que implementar
// (una pasa un string "a" y la otra pasa un TipoMedicamento)
import "google/protobuf/any.proto";

service TipoMedicamentoService{
  rpc altaTipoMedicamento (AltaTipoMedicamentoRequest) returns (AltaTipoMedicamentoResponse) {};
  rpc bajaTipoMedicamento (IdBajaRequest) returns (IdBajaResponse) {};
  rpc getTipoMedicamentoInfo(TipoMedicamentoRequest) returns (TipoMedicamentoResponse);
  rpc traerTodos (TraerTodosRequest) returns (TraerTodosResponse);
}

message IdBajaRequest{
  int32 id = 1;
}
message IdBajaResponse{
  string baja= 1;
}


message AltaTipoMedicamentoRequest{
  string nombre = 1;
}
message AltaTipoMedicamentoResponse{
  int32 id = 1;
  string nombre = 2;
  bool activo = 3;
}


message TipoMedicamentoRequest{
  int32 id = 1;
}
message TipoMedicamentoResponse {
  int32 id = 1;
  string nombre = 2;
  bool activo = 3;
}

message TraerTodosRequest {
  string todos = 1;
}
message TraerTodosResponse {
  repeated TipoMedicamentoResponse todos = 1;
}